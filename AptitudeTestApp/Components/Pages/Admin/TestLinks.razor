@page "/admin/test-links"
@using AptitudeTestApp.Application.DTOs
@using AptitudeTestApp.Application.Interfaces
@using AptitudeTestApp.Data.Models
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject ITestSessionService testSessionService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IToastService ToastService

@rendermode InteractiveServer
@attribute [Authorize]

<div class="container-fluid py-4 px-4 bg-white text-dark">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="text-dark mb-1">Test Session Management</h2>
            <p class="text-muted mb-0">
                @if (isLoading)
                {
                    <span>Loading test sessions...</span>
                }
                else if (filteredTestSessions?.Any() == true)
                {
                    <span>Showing @Math.Min(pageSize, filteredTestSessions.Count - (currentPage - 1) * pageSize) of @filteredTestSessions.Count test sessions</span>
                }
                else
                {
                    <span>No test sessions found</span>
                }
            </p>
        </div>
         <button class="btn btn-dark rounded-pill px-4 shadow-sm" @onclick="NavigateToAddPage">
            <i class="fa fa-plus-circle me-2"></i>Create New Test Session
        </button>
    </div>

    <!-- Search and Filters Card -->
    <div class="card bg-light border-dark mb-4">
        <div class="card-body">
            <div class="row g-3">
                <!-- Search Input -->
                <div class="col-md-6">
                    <label class="form-label fw-bold text-dark">Search Test Sessions</label>
                    <div class="input-group border-dark rounded">
                        <span class="input-group-text bg-white border-dark">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control border-dark" 
                               placeholder="Search by university, test name..."
                               @bind="searchTerm" @bind:event="oninput" />
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <button class="btn btn-outline-dark" type="button" @onclick="ClearSearch">
                                <i class="bi bi-x"></i>
                            </button>
                        }
                    </div>
                </div>

                <!-- Status Filter -->
                <div class="col-md-3">
                    <label class="form-label fw-bold text-dark">Status</label>
                    <select class="form-select border-dark" @bind="statusFilter">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>

                <!-- Page Size -->
                <div class="col-md-3">
                    <label class="form-label fw-bold text-dark">Show</label>
                    <select class="form-select border-dark" @bind="pageSize" @bind:event="onchange">
                        <option value="5">5 per page</option>
                        <option value="10">10 per page</option>
                        <option value="25">25 per page</option>
                    </select>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="row mt-3">
                <div class="col-12">
                    <button class="btn btn-dark me-2" @onclick="ApplyFilters">
                        <i class="bi bi-search"></i> Search
                    </button>
                    <button class="btn btn-outline-dark" @onclick="ResetFilters">
                        <i class="bi bi-arrow-clockwise"></i> Reset
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-dark" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-dark">Loading test sessions...</p>
        </div>
    }
    else if (paginatedTestSessions?.Any() == true)
    {
        <!-- Test Sessions Grid -->
        <div class="row g-3 mb-4">
            @foreach (var session in paginatedTestSessions)
            {
                <div class="col-12">
                    <div class="card border-dark">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <!-- Session Information -->
                                <div class="col-md-8">
                                    <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
                                        <h5 class="card-title text-dark mb-0">
                                            @HighlightSearchTerm(session.University?.Name ?? "Unknown University")
                                        </h5>
                                        <span class="badge @(session.IsActive ? "bg-white text-dark border border-dark" : "bg-danger text-white")">
                                            @(session.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </div>
                                    
                                    <h6 class="text-dark mb-2">
                                        <i class="bi bi-clipboard-check me-1"></i>
                                        @HighlightSearchTerm(session.TestName)
                                    </h6>
                                    
                                    <div class="row text-muted">
                                        <div class="col-sm-6">
                                            <small>
                                                <i class="bi bi-calendar-event me-1"></i>
                                                Start: @session.StartDate.ToString("MMM dd, yyyy")
                                            </small>
                                        </div>
                                        <div class="col-sm-6">
                                            <small>
                                                <i class="bi bi-calendar-x me-1"></i>
                                                End: @session.EndDate.ToString("MMM dd, yyyy")
                                            </small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Action Buttons -->
                                <div class="col-md-4 text-end">
                                    <div class="d-flex flex-wrap justify-content-end gap-2">
                                        @if (session.IsActive)
                                        {
                                            <button class="btn btn-dark btn-sm" 
                                                    title="Copy Test Link"
                                                    @onclick="() => CopyToClipboard(session)"
                                                    disabled="@isLoading">
                                                <i class="bi bi-clipboard"></i> Copy Link
                                            </button>
                                        }
                                        
                                         <button class="btn btn-sm btn-outline-dark" 
                                                @onclick="() => ShowEditModal(session)">
                                            <i class="bi bi-pencil me-1"></i>Edit
                                        </button>

                                        <button class="btn @(session.IsActive ? "btn-outline-dark" : "btn-dark") btn-sm"
                                                @onclick="() => ToggleSessionStatus(session.Id)"
                                                disabled="@isLoading">
                                            <i class="bi @(session.IsActive ? "bi-eye-slash" : "bi-eye")"></i>
                                            @(session.IsActive ? "Deactivate" : "Activate")
                                        </button>
                                        
                                        <button class="btn btn-outline-danger btn-sm" 
                                                @onclick="() => ConfirmDelete(session)"
                                                disabled="@isLoading">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center">
            <div class="text-muted">
                Page @currentPage of @TotalPages (@filteredTestSessions?.Count total test sessions)
            </div>
            <nav>
                <ul class="pagination mb-0">
                    <li class="page-item @(CanGoPrevious ? "" : "disabled")">
                        <button class="page-link border-dark text-dark" @onclick="() => GoToPage(1)" disabled="@(!CanGoPrevious)">
                            <i class="bi bi-chevron-double-left"></i>
                        </button>
                    </li>
                    <li class="page-item @(CanGoPrevious ? "" : "disabled")">
                        <button class="page-link border-dark text-dark" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                    </li>
                    
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(TotalPages, currentPage + 2); i++)
                    {
                        int pageNumber = i;
                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                            <button class="page-link @(pageNumber == currentPage ? "bg-dark border-dark" : "border-dark text-dark")" 
                                    @onclick="() => GoToPage(pageNumber)">
                                @pageNumber
                            </button>
                        </li>
                    }
                    
                    <li class="page-item @(CanGoNext ? "" : "disabled")">
                        <button class="page-link border-dark text-dark" @onclick="NextPage" disabled="@(!CanGoNext)">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </li>
                    <li class="page-item @(CanGoNext ? "" : "disabled")">
                        <button class="page-link border-dark text-dark" @onclick="() => GoToPage(TotalPages)" disabled="@(!CanGoNext)">
                            <i class="bi bi-chevron-double-right"></i>
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <!-- Empty State -->
        <div class="text-center py-5">
            <i class="bi bi-clipboard-x display-1 text-muted"></i>
            <h4 class="text-dark mt-3">
                @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(statusFilter))
                {
                    <span>No test sessions match your current filters</span>
                }
                else
                {
                    <span>No test sessions available</span>
                }
            </h4>
            @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(statusFilter))
            {
                <button class="btn btn-outline-dark mt-3" @onclick="ResetFilters">
                    <i class="bi bi-arrow-clockwise"></i> Clear Filters
                </button>
            }
        </div>
    }
</div>


@if (showEditModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content border-dark">
                <div class="modal-header bg-light border-dark">
                    <h5 class="modal-title text-dark">
                        <i class="bi bi-@(SelectedTest.Id == Guid.Empty ? "plus-circle" : "pencil") me-2"></i>
                        @((SelectedTest.Id == Guid.Empty) ? "Add Test" : "Edit Test")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                     <div class="mb-3">
                        <label class="form-label fw-bold text-dark">
                            Test Name <span class="text-danger">*</span>
                        </label>
                        <input class="form-control border-dark @(string.IsNullOrWhiteSpace(SelectedTest.TestName) ? "is-invalid" : "")" 
                               @bind="SelectedTest.TestName" 
                               placeholder="Enter test name..." />
                        @if (string.IsNullOrWhiteSpace(SelectedTest.TestName))
                        {
                            <div class="invalid-feedback">Test name is required</div>
                        }
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold text-dark">
                            University Name <span class="text-danger">*</span>
                        </label>
                        <input class="form-control border-dark @(string.IsNullOrWhiteSpace(SelectedTest.University.Name) ? "is-invalid" : "")" 
                               @bind="SelectedTest.University.Name" 
                               placeholder="Enter university name..." />
                        @if (string.IsNullOrWhiteSpace(SelectedTest.University.Name))
                        {
                            <div class="invalid-feedback">University name is required</div>
                        }
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold text-dark">
                            Time Limit <span class="text-danger">*</span>
                        </label>
                        <input class="form-control border-dark @((SelectedTest.TimeLimit <= 10) ? "is-invalid" : "")" 
                               @bind="SelectedTest.TimeLimit" 
                               placeholder="Enter Time Limit (10 - 180)" />
                        @if (SelectedTest.TimeLimit <= 10)
                        {
                            <div class="invalid-feedback">Correct Time Limit is required</div>
                        }
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold text-dark">
                            Start Time <span class="text-danger">*</span>
                        </label>
                        <input type="date" 
                               class="form-control border-dark @(!IsValidDateTime(SelectedTest.StartDate) ? "is-invalid" : "")" 
                               @bind="SelectedTest.StartDate" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold text-dark">
                            End Time <span class="text-danger">*</span>
                        </label>
                        <input type="date" 
                               class="form-control border-dark @(!IsValidDateTime(SelectedTest.EndDate) ? "is-invalid" : "")" 
                               @bind="SelectedTest.EndDate" />
                    </div>

                    @if (!IsFormValid())
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            Please fill in all required fields correctly.
                        </div>
                    }
                </div>
                <div class="modal-footer bg-light border-dark">
                    <button class="btn btn-outline-dark" @onclick="CloseModal">
                        <i class="bi bi-x-circle me-1"></i>Cancel
                    </button>
                    <button class="btn btn-dark" @onclick="SaveTest" disabled="@isSaving">
                        <i class="bi bi-@(isSaving ? "hourglass-split" : "check-circle") me-1"></i>
                        @(isSaving ? "Saving..." : "Save University")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (sessionToDelete != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6); backdrop-filter: blur(2px);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content border-0 shadow-lg rounded-4">
                <div class="modal-header bg-danger text-white rounded-top-4">
                    <h5 class="modal-title d-flex align-items-center">
                        <i class="bi bi-exclamation-triangle-fill me-2 fs-4"></i>
                        Confirm Deletion
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-light border-dark mb-3">
                        <strong>University:</strong> @sessionToDelete.University?.Name<br />
                        <strong>Test:</strong> @sessionToDelete.TestName<br />
                        <strong>Period:</strong> @sessionToDelete.StartDate.ToShortDateString() - @sessionToDelete.EndDate.ToShortDateString()
                    </div>
                    <p class="mb-2">Are you sure you want to delete this test session?</p>
                    <p class="text-danger mb-0">
                        <small><i class="bi bi-exclamation-triangle me-1"></i>This action cannot be undone.</small>
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-outline-dark" @onclick="CancelDelete" disabled="@isDeleting">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                    <button class="btn btn-danger" @onclick="DeleteConfirmed" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        else
                        {
                            <i class="bi bi-trash me-2"></i>
                        }
                        Delete Session
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    // Data properties
    private List<TestSessionDto> testSessions = new();
    private List<TestSessionDto> filteredTestSessions = new();
    private List<TestSessionDto> paginatedTestSessions = new();

    // State management
    private bool isLoading = true;
    private bool isDeleting = false;
    private bool isSaving = false;
    private TestSessionDto? sessionToDelete = null;
    private TestSessionDto SelectedTest = new();
    private Guid creatorGuid;
    private bool showEditModal = false;
    
    // Pagination properties
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount => filteredTestSessions?.Count ?? 0;
    
    // Search and filter properties
    private string searchTerm = "";
    private string statusFilter = "";
    
    // Pagination calculations
    private int TotalPages => (int)Math.Ceiling((double)totalCount / pageSize);
    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < TotalPages;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is null) return;

        var authState = await AuthenticationState;
        string creatorId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "Admin";
        creatorGuid = Guid.TryParse(creatorId, out var parsed) ? parsed : Guid.Empty;

        await LoadTestSessions();
    }

    private async Task LoadTestSessions()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            testSessions = await testSessionService.GetAllTestSessionWithUniversityAsync(creatorGuid);
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading test sessions: {ex.Message}");
            ToastService.Error("Error", "Failed to load test sessions.", 5000);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilters()
    {
        var filtered = testSessions.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(s => 
                (s.University?.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
                (s.TestName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true));
        }

        // Apply status filter
        if (!string.IsNullOrEmpty(statusFilter))
        {
            bool isActive = statusFilter == "active";
            filtered = filtered.Where(s => s.IsActive == isActive);
        }

        filteredTestSessions = filtered.ToList();
        currentPage = 1; // Reset to first page
        UpdatePagination();
    }

    private void UpdatePagination()
    {
        var skip = (currentPage - 1) * pageSize;
        paginatedTestSessions = filteredTestSessions.Skip(skip).Take(pageSize).ToList();
        StateHasChanged();
    }

    private void ResetFilters()
    {
        searchTerm = "";
        statusFilter = "";
        ApplyFilters();
    }

    private void ClearSearch()
    {
        searchTerm = "";
        ApplyFilters();
    }

    private void NavigateToAddPage()
    {
        Navigation.NavigateTo("/admin/create-test");
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
            UpdatePagination();
        }
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            GoToPage(currentPage + 1);
        }
    }

    private void PreviousPage()
    {
        if (CanGoPrevious)
        {
            GoToPage(currentPage - 1);
        }
    }

    private async Task ToggleSessionStatus(Guid id)
    {
        try
        {
            await testSessionService.ToggleActiveTestSessionAsync(id);
            await LoadTestSessions();
            ToastService.Success("Success", "Test session status updated successfully.", 3000);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling session status: {ex.Message}");
            ToastService.Error("Error", "Failed to update test session status.", 5000);
        }
    }

    private void ShowEditModal(TestSessionDto test)
    {
        SelectedTest = test ?? new TestSessionDto();
        showEditModal = true;
    }

     private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(SelectedTest.TestName) &&
               !string.IsNullOrWhiteSpace(SelectedTest.University.Name) &&
               SelectedTest.TimeLimit >= 10 &&
               IsValidDateTime(SelectedTest.StartDate) &&
               IsValidDateTime(SelectedTest.EndDate);
    }


    private void CloseModal()
    {
        showEditModal = false;
        SelectedTest = new TestSessionDto();
    }

    private void ConfirmDelete(TestSessionDto session)
    {
        sessionToDelete = session;
    }

    private void CancelDelete()
    {
        sessionToDelete = null;
    }

    
    private void CloseDeleteModal()
    {
        sessionToDelete = null;
    }

    private async Task DeleteConfirmed()
    {
        if (sessionToDelete == null) return;

        try
        {
            isDeleting = true;
            StateHasChanged();
            
            await testSessionService.DeleteAsync(sessionToDelete.Id, creatorGuid);
            ToastService.Success("Success", "Test session deleted successfully.", 3000);
            
            sessionToDelete = null;
            await LoadTestSessions();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting test session: {ex.Message}");
            ToastService.Error("Error", "Failed to delete test session.", 5000);
        }
        finally
        {
            isDeleting = false;
            StateHasChanged();
        }
    }

    private bool IsValidDateTime(DateTime dateTime)
    {
        return dateTime != default && dateTime > DateTime.MinValue && dateTime < DateTime.MaxValue;
    }

     private async Task SaveTest()
    {        
        if (!IsFormValid())
        {
            StateHasChanged();
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            if (SelectedTest.Id == Guid.Empty)
                await CreateNewTest(SelectedTest, creatorGuid);
            else
                await UpdateExistingTest(SelectedTest, creatorGuid);

            showEditModal = false;
            await LoadTestSessions();
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a toast here
            Console.WriteLine($"Error processing university: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private string GetTestLink(TestSessionDto session)
    {
        string baseUrl = Navigation.BaseUri.TrimEnd('/');
        
        if (string.IsNullOrWhiteSpace(baseUrl))
        {
            baseUrl = Navigation.Uri.TrimEnd('/');
        }
        
        return $"{baseUrl}/test/{session.UniversityId}/{session.Token}";
    }

    private async Task CopyToClipboard(TestSessionDto session)
    {
        var link = GetTestLink(session);

        try
        {
            await JS.InvokeVoidAsync("copyText", link);
            ToastService.Success("Link Copied", $"Test link for '{session.University?.Name}' copied to clipboard!", 5000);
        }
        catch (JSException ex)
        {
            ToastService.Error("Failed", "Failed to copy link.", 5000);
            Console.WriteLine("JS Error copying: " + ex.Message);
        }
    }

    private async Task CreateNewTest(TestSessionDto test, Guid userId)
    {
        test.IsActive = true;
        await testSessionService.CreateAsync(test, userId);
    }

    private async Task UpdateExistingTest(TestSessionDto test, Guid userId)
    {
        await testSessionService.UpdateAsync(test, userId);
    }

    private MarkupString HighlightSearchTerm(string? text)
    {
        if (string.IsNullOrEmpty(text) || string.IsNullOrEmpty(searchTerm))
        {
            return new MarkupString(text ?? "");
        }

        var highlightedText = text.Replace(searchTerm, $"<mark class=\"bg-dark text-white\">{searchTerm}</mark>", StringComparison.OrdinalIgnoreCase);
        return new MarkupString(highlightedText);
    }
}