@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using AptitudeTestApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Login</PageTitle>

<style>
    body {
        background: linear-gradient(to right, #fff, #ddd);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .login-container {
        min-height: 90vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .login-card {
        background: #fff;
        padding: 2rem;
        border-radius: 16px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        width: 100%;
        max-width: 420px;
        animation: fadeIn 0.6s ease-in-out;
    }

        .login-card h2 {
            text-align: center;
            margin-bottom: 1.5rem;
            color: #333;
        }

    .form-floating > label {
        color: #777;
    }

    .form-check-label {
        font-size: 0.9rem;
    }

    .login-card a {
        font-size: 0.9rem;
        color: #4e54c8;
        text-decoration: none;
    }

        .login-card a:hover {
            text-decoration: underline;
        }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }
</style>

<div class="login-container">
    <div class="login-card">

        <EditForm Model="@Input" Method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <h2>Welcome To Talent Scope</h2>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email"
                           id="InputEmail"
                           class="form-control"
                           autocomplete="username"
                           aria-required="true"
                           placeholder="name@example.com" />
                <label for="InputEmail">Email</label>
                <ValidationMessage For="@(() => Input.Email)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Password"
                           type="password"
                           id="InputPassword"
                           class="form-control"
                           autocomplete="current-password"
                           aria-required="true"
                           placeholder="password" />
                <label for="InputPassword">Password</label>
                <ValidationMessage For="@(() => Input.Password)" class="text-danger" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input checkbox-dark mt-2" id="rememberMeCheck" />
                <label for="rememberMeCheck" class="form-check-label mt-1">Remember me</label>
            </div>

            <button type="submit" class="btn btn-dark w-100">Log In</button>

            <div class="mt-3 text-center text-dark">
                <p><a href="Account/ForgotPassword" class="text-dark">Forgot your password?</a></p>
                <p>
                    <a class="text-dark" href="@NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })">
                        Register as a new user
                    </a>
                </p>
            </div>
        </EditForm>
    </div>
</div>


@code {

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
