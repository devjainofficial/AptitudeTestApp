@page "/superadmin/user-approvals"
@using AptitudeTestApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@attribute [Authorize(Roles = "SuperAdmin")]

@rendermode InteractiveServer

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <div class="card border-0 shadow-sm rounded-4 bg-white text-black theme-box">
        <div class="card-header border-bottom bg-white rounded-top-4">
            <h3 class="mb-0">User Access Approvals</h3>
        </div>
        <div class="card-body">
            @if (pagedUsers == null)
            {
                <div class="text-center py-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!pagedUsers.Any())
            {
                <div class="alert alert-secondary">No users found.</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-sm table-bordered align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Email</th>
                                <th>Username</th>
                                <th>Email Confirmed</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in pagedUsers)
                            {
                                <tr>
                                    <td>@user.Email</td>
                                    <td>@user.UserName</td>
                                    <td>
                                        @if (user.EmailConfirmed)
                                        {
                                            <span class="badge bg-dark text-white">Yes</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-light text-dark">No</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @if (!user.EmailConfirmed)
                                        {
                                            <button class="btn btn-sm btn-dark me-2" @onclick="() => ToggleUserApproval(user.Id)">
                                                Approve
                                            </button>
                                        }
                                        else
                                        {
                                             <button class="btn btn-sm btn-outline-dark me-2" @onclick="() => ToggleUserApproval(user.Id)">
                                                Disapprove
                                            </button>
                                        }
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteConfirmation(user.Id)">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <button class="btn btn-outline-dark btn-sm" @onclick="PreviousPage" disabled="@(_currentPage == 1)">
                        Previous
                    </button>
                    <span>Page @_currentPage of @_totalPages</span>
                    <button class="btn btn-outline-dark btn-sm" @onclick="NextPage" disabled="@(_currentPage == _totalPages)">
                        Next
                    </button>
                </div>
            }
        </div>
    </div>
</div>


@if (showDeleteModal)  
{  
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6); backdrop-filter: blur(2px);">  
        <div class="modal-dialog modal-lg modal-dialog-centered">  
            <div class="modal-content border-0 shadow-lg rounded-4">  
                <div class="modal-header bg-danger text-white rounded-top-4">  
                    <h5 class="modal-title d-flex align-items-center">  
                        <i class="bi bi-exclamation-triangle-fill me-2 fs-4"></i>  
                        Confirm Deletion  
                    </h5>  
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal"></button>  
                </div>  
                <div class="modal-body">  
                    <p class="mb-3">Are you sure you want to delete this user?</p>  
                    <div class="alert alert-light border">  
                        <strong>@userToDelete?.UserName</strong><br>  
                    </div>  
                    <p class="text-danger mb-0">  
                        <i class="bi bi-exclamation-triangle me-1"></i>  
                        <strong>This action cannot be undone.</strong>  
                    </p>  
                </div>  
                <div class="modal-footer justify-content-between">  
                    <button class="btn btn-outline-secondary" @onclick="CloseDeleteModal">  
                        <i class="bi bi-x-circle me-1"></i> Cancel  
                    </button>  
                    <button class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">  
                        <i class="bi bi-@(isDeleting ? "hourglass-split" : "trash") me-1"></i>  
                        @(isDeleting ? "Deleting..." : "Delete User")  
                    </button>  
                </div>  
            </div>  
        </div>  
    </div>  
}

@code {
    private List<ApplicationUser>? allUsers;
    private List<ApplicationUser>? pagedUsers;

    private int _currentPage = 1;
    private int _pageSize = 10;
    private int _totalPages;

    private bool showDeleteModal = false;
    private bool isDeleting = false;
    private ApplicationUser? userToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        allUsers = await LoadNonSuperAdminUsersAsync();
        _totalPages = (int)Math.Ceiling((double)allUsers.Count / _pageSize);
        LoadPage();
    }

    private async Task<List<ApplicationUser>> LoadNonSuperAdminUsersAsync()
    {
        var users = UserManager.Users.ToList();
        var filtered = new List<ApplicationUser>();

        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            if (!roles.Contains("SuperAdmin"))
            {
                filtered.Add(user);
            }
        }

        return filtered.OrderBy(u => u.EmailConfirmed).ToList();
    }

    private void LoadPage()
    {
        pagedUsers = allUsers
            ?.Skip((_currentPage - 1) * _pageSize)
            .Take(_pageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            LoadPage();
        }
    }

    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            LoadPage();
        }
    }

    private async Task ToggleUserApproval(string userId)
    {
        ApplicationUser? user = await UserManager.FindByIdAsync(userId);
        if (user is not null)
        {
            user.EmailConfirmed = !user.EmailConfirmed;
            await UserManager.UpdateAsync(user);

            await LoadUsersAsync();
        }
    }
    
    private async Task LoadUsersAsync()
    {
        allUsers = await LoadNonSuperAdminUsersAsync();
        _totalPages = (int)Math.Ceiling((double)allUsers.Count / _pageSize);
        LoadPage();
    }
    
    private async Task ConfirmDelete()
    {
       if (userToDelete == null) return;

        isDeleting = true;
        StateHasChanged();

        try
        {
            await UserManager.DeleteAsync(userToDelete);
            showDeleteModal = false;
            await LoadUsersAsync();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error deleting user: {ex.Message}");
        }
        finally
        {
            isDeleting = false;
            userToDelete = null;
            StateHasChanged();
        }
    }

    private async Task ShowDeleteConfirmation(string userId)
    {
        ApplicationUser? user = await UserManager.FindByIdAsync(userId);

        userToDelete = user;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        userToDelete = null;
    }

}
