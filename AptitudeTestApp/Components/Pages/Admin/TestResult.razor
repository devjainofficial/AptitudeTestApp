@page "/admin/student-results"
@inject IStudentSubmissionService SubmissionService
@inject IUniversityService UniversityService
@inject NavigationManager Navigation

@using AptitudeTestApp.Application.DTOs
@using AptitudeTestApp.Application.Interfaces
@using AptitudeTestApp.Data.Models
@using AptitudeTestApp.Shared.Enums
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Student Results</PageTitle>

<div class="container-fluid px-4 py-3">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="text-dark mb-1">Student Results Management</h2>
            <p class="text-muted mb-0">
                @if (isLoading)
                {
                    <span>Loading student submissions...</span>
                }
                else if (filteredSubmissions?.Any() == true)
                {
                    <span>Showing @Math.Min(pageSize, filteredSubmissions.Count - (currentPage - 1) * pageSize) of @filteredSubmissions.Count submissions</span>
                }
                else
                {
                    <span>No submissions found</span>
                }
            </p>
        </div>
    </div>

    <!-- Search and Filters Card -->
    <div class="card bg-light border-dark mb-4">
        <div class="card-body">
            <div class="row g-3">
                <!-- Search Input -->
                <div class="col-md-4">
                    <label class="form-label fw-bold text-dark">Search Students</label>
                    <div class="input-group border-dark rounded">
                        <span class="input-group-text bg-white border-dark">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control border-dark" 
                               placeholder="Search by name or email..."
                               @bind="searchTerm" @bind:event="oninput" />
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <button class="btn btn-outline-dark" type="button" @onclick="ClearSearch">
                                <i class="bi bi-x"></i>
                            </button>
                        }
                    </div>
                </div>

                <!-- University Filter -->
                <div class="col-md-3">
                    <label class="form-label fw-bold text-dark">University</label>
                    <select class="form-select border-dark" @bind="selectedUniversityId">
                        <option value="">All Universities</option>
                        @foreach (var university in universities)
                        {
                            <option value="@university.Id">@university.Name</option>
                        }
                    </select>
                </div>

                <!-- Qualification Filter -->
                <div class="col-md-2">
                    <label class="form-label fw-bold text-dark">Status</label>
                    <select class="form-select border-dark" @bind="qualificationFilter">
                        <option value="">All Status</option>
                        <option value="qualified">Qualified</option>
                        <option value="unqualified">Unqualified</option>
                    </select>
                </div>

                <!-- Test Status Filter -->
                <div class="col-md-3">
                    <label class="form-label fw-bold text-dark">Test Status</label>
                    <select class="form-select border-dark" @bind="statusFilter">
                        <option value="">All Test Status</option>
                        <option value="Completed">Completed</option>
                        <option value="InProgress">In Progress</option>
                        <option value="Disqualified">Disqualified</option>
                    </select>
                </div>
            </div>

            <div class="row mt-3">
                <!-- Page Size -->
                <div class="col-md-3">
                    <label class="form-label fw-bold text-dark">Show</label>
                    <select class="form-select border-dark" @bind="pageSize" @bind:event="onchange">
                        <option value="5">5 per page</option>
                        <option value="10">10 per page</option>
                        <option value="25">25 per page</option>
                        <option value="50">50 per page</option>
                    </select>
                </div>

                <!-- Action Buttons -->
                <div class="col-md-9 d-flex align-items-end">
                    <button class="btn btn-dark me-2" @onclick="ApplyFilters" disabled="@isLoading">
                        <i class="bi bi-search"></i> Search
                    </button>
                    <button class="btn btn-outline-dark" @onclick="ResetFilters" disabled="@isLoading">
                        <i class="bi bi-arrow-clockwise"></i> Reset
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-dark" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-dark">Loading student submissions...</p>
        </div>
    }
    else if (paginatedSubmissions?.Any() == true)
    {
        <!-- Results Grid -->
        <div class="row g-3 mb-4">
            @foreach (var submission in paginatedSubmissions)
            {
                <div class="col-12">
                    <div class="card border-dark">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <!-- Student Information -->
                                <div class="col-md-8">
                                    <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
                                        <h5 class="card-title text-dark mb-0">
                                            @HighlightSearchTerm(submission.StudentName)
                                        </h5>
                                        <span class="badge @GetQualificationBadgeClass(submission)">
                                            @(IsQualified(submission) ? "Qualified" : "Unqualified")
                                        </span>
                                        <span class="badge @GetStatusBadgeClass(submission.Status)">
                                            @submission.Status
                                        </span>
                                    </div>
                                    
                                    <div class="row mb-2">
                                        <div class="col-sm-6">
                                            <small class="text-muted">
                                                <i class="bi bi-envelope me-1"></i>
                                                @HighlightSearchTerm(submission.StudentEmail)
                                            </small>
                                        </div>
                                        <div class="col-sm-6">
                                            <small class="text-muted">
                                                <i class="bi bi-building me-1"></i>
                                                @submission.TestSession.University.Name
                                            </small>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-sm-4">
                                            <small class="text-muted">
                                                <i class="bi bi-trophy me-1"></i>
                                                Score: <strong>@submission.TotalScore / @submission.MaxPossibleScore</strong>
                                            </small>
                                        </div>
                                        <div class="col-sm-4">
                                            <small class="text-muted">
                                                <i class="bi bi-percent me-1"></i>
                                                Percentage: 
                                                <span class="badge @GetScoreBadgeClass(submission.PercentageScore) ms-1">
                                                    @submission.PercentageScore.ToString("F1")%
                                                </span>
                                            </small>
                                        </div>
                                        <div class="col-sm-4">
                                            <small class="text-muted">
                                                <i class="bi bi-clock me-1"></i>
                                                @if (submission.EndTime.HasValue)
                                                {
                                                    <span>Duration: @GetTestDuration(submission.StartTime, submission.EndTime.Value)</span>
                                                }
                                                else
                                                {
                                                    <span>Started: @submission.StartTime.ToString("MMM dd, HH:mm")</span>
                                                }
                                            </small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Action Buttons -->
                                <div class="col-md-4 text-end">
                                    <div class="d-flex flex-wrap justify-content-end gap-2">
                                        <button class="btn btn-dark btn-sm" 
                                                @onclick="() => ViewDetails(submission.Id)"
                                                disabled="@isLoading">
                                            <i class="bi bi-eye"></i> View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center">
            <div class="text-muted">
                Page @currentPage of @TotalPages (@filteredSubmissions?.Count total submissions)
            </div>
            <nav>
                <ul class="pagination mb-0">
                    <li class="page-item @(CanGoPrevious ? "" : "disabled")">
                        <button class="page-link border-dark text-dark" @onclick="() => GoToPage(1)" disabled="@(!CanGoPrevious)">
                            <i class="bi bi-chevron-double-left"></i>
                        </button>
                    </li>
                    <li class="page-item @(CanGoPrevious ? "" : "disabled")">
                        <button class="page-link border-dark text-dark" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                    </li>
                    
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(TotalPages, currentPage + 2); i++)
                    {
                        int pageNumber = i;
                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                            <button class="page-link @(pageNumber == currentPage ? "bg-dark border-dark" : "border-dark text-dark")" 
                                    @onclick="() => GoToPage(pageNumber)">
                                @pageNumber
                            </button>
                        </li>
                    }
                    
                    <li class="page-item @(CanGoNext ? "" : "disabled")">
                        <button class="page-link border-dark text-dark" @onclick="NextPage" disabled="@(!CanGoNext)">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </li>
                    <li class="page-item @(CanGoNext ? "" : "disabled")">
                        <button class="page-link border-dark text-dark" @onclick="() => GoToPage(TotalPages)" disabled="@(!CanGoNext)">
                            <i class="bi bi-chevron-double-right"></i>
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <!-- Empty State -->
        <div class="text-center py-5">
            <i class="bi bi-file-earmark-text display-1 text-muted"></i>
            <h4 class="text-dark mt-3">
                @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedUniversityId) || 
                     !string.IsNullOrEmpty(qualificationFilter) || !string.IsNullOrEmpty(statusFilter))
                {
                    <span>No submissions match your current filters</span>
                }
                else
                {
                    <span>No student submissions available</span>
                }
            </h4>
            @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedUniversityId) || 
                 !string.IsNullOrEmpty(qualificationFilter) || !string.IsNullOrEmpty(statusFilter))
            {
                <button class="btn btn-outline-dark mt-3" @onclick="ResetFilters">
                    <i class="bi bi-arrow-clockwise"></i> Clear Filters
                </button>
            }
        </div>
    }
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }
    
    // Data properties
    private List<StudentSubmissionDto> allSubmissions = new();
    private List<StudentSubmissionDto> filteredSubmissions = new();
    private List<StudentSubmissionDto> paginatedSubmissions = new();
    private List<UniversityDto> universities = new();
    
    // State management
    private bool isLoading = true;
    private Guid creatorGuid;
    
    // Pagination properties
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount => filteredSubmissions?.Count ?? 0;
    
    // Search and filter properties
    private string searchTerm = "";
    private string selectedUniversityId = "";
    private string qualificationFilter = "";
    private string statusFilter = "";
    
    // Pagination calculations
    private int TotalPages => (int)Math.Ceiling((double)totalCount / pageSize);
    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < TotalPages;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is null) return;

        var authState = await AuthenticationState;
        string creatorId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "Admin";
        creatorGuid = Guid.TryParse(creatorId, out var parsed) ? parsed : Guid.Empty;

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            // Load universities and submissions
            universities = await UniversityService.GetAllAsync(creatorGuid, 0, int.MaxValue);
            allSubmissions = await SubmissionService.GetAllWithTestSessionAsync(creatorGuid);
            
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilters()
    {
        var filtered = allSubmissions.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(s => 
                (s.StudentName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) ||
                (s.StudentEmail?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true));
        }

        // Apply university filter
        if (!string.IsNullOrEmpty(selectedUniversityId) && Guid.TryParse(selectedUniversityId, out var universityId))
        {
            filtered = filtered.Where(s => s.TestSession.UniversityId == universityId);
        }

        // Apply qualification filter
        if (!string.IsNullOrEmpty(qualificationFilter))
        {
            bool isQualified = qualificationFilter == "qualified";
            filtered = filtered.Where(s => IsQualified(s) == isQualified);
        }

        // Apply status filter
        if (!string.IsNullOrEmpty(statusFilter) && Enum.TryParse<TestStatus>(statusFilter, out var status))
        {
            filtered = filtered.Where(s => s.Status == status);
        }

        filteredSubmissions = filtered.OrderByDescending(s => s.StartTime).ToList();
        currentPage = 1; // Reset to first page
        UpdatePagination();
    }

    private void UpdatePagination()
    {
        var skip = (currentPage - 1) * pageSize;
        paginatedSubmissions = filteredSubmissions.Skip(skip).Take(pageSize).ToList();
        StateHasChanged();
    }

    private void ResetFilters()
    {
        searchTerm = "";
        selectedUniversityId = "";
        qualificationFilter = "";
        statusFilter = "";
        ApplyFilters();
    }

    private void ClearSearch()
    {
        searchTerm = "";
        ApplyFilters();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
            UpdatePagination();
        }
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            GoToPage(currentPage + 1);
        }
    }

    private void PreviousPage()
    {
        if (CanGoPrevious)
        {
            GoToPage(currentPage - 1);
        }
    }

    private void ViewDetails(Guid id)
    {
        Navigation.NavigateTo($"/admin/student-results/{id}");
    }

    private bool IsQualified(StudentSubmissionDto submission)
    {
        return submission.PercentageScore >= submission.TestSession.PassingScore;
    }

    private string GetQualificationBadgeClass(StudentSubmissionDto submission)
    {
        return IsQualified(submission) ? "bg-white text-dark border border-dark" : "bg-danger text-white";
    }

    private string GetStatusBadgeClass(TestStatus status)
    {
        return status switch
        {
            TestStatus.Completed => "bg-white text-dark border border-dark",
            TestStatus.InProgress => "bg-warning text-dark",
            TestStatus.Disqualified => "bg-danger text-white",
            _ => "bg-secondary text-white"
        };
    }

    private string GetScoreBadgeClass(decimal percentage)
    {
        return percentage switch
        {
            >= 90 => "bg-success text-white",
            >= 70 => "bg-info text-white",
            >= 50 => "bg-warning text-dark",
            _ => "bg-danger text-white"
        };
    }

    private string GetTestDuration(DateTime startTime, DateTime endTime)
    {
        var duration = endTime - startTime;
        if (duration.TotalHours >= 1)
        {
            return $"{(int)duration.TotalHours}h {duration.Minutes}m";
        }
        return $"{(int)duration.TotalMinutes}m";
    }

    private MarkupString HighlightSearchTerm(string? text)
    {
        if (string.IsNullOrEmpty(text) || string.IsNullOrEmpty(searchTerm))
        {
            return new MarkupString(text ?? "");
        }

        var highlightedText = text.Replace(searchTerm, $"<mark class=\"bg-dark text-white\">{searchTerm}</mark>", StringComparison.OrdinalIgnoreCase);
        return new MarkupString(highlightedText);
    }
}