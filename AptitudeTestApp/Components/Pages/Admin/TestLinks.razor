@page "/admin/test-links"
@using AptitudeTestApp.Application.Interfaces
@using AptitudeTestApp.Data.Models
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject ITestSessionService testSessionService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IToastService ToastService
@attribute [Authorize]

@rendermode InteractiveServer

<h3 class="mb-4">Manage Test Sessions</h3>

@if (testSessions == null)
{
    <p><em>Loading...</em></p>
}
else if (!testSessions.Any())
{
    <div class="alert alert-info">No test sessions available.</div>
}
else
{
    <table class="table table-striped table-bordered align-middle">
        <thead class="table-dark">
            <tr>
                <th>University</th>
                <th>Test Name</th>
                <th>Start</th>
                <th>End</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var session in testSessions)
            {
                <tr>
                    <td>@session.University.Name</td>
                    <td>@session.TestName</td>
                    <td>@session.StartDate.ToShortDateString()</td>
                    <td>@session.EndDate.ToShortDateString()</td>
                    <td>
                        @if (session.IsActive)
                        {
                            <span class="badge bg-success">Active</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Inactive</span>
                        }
                    </td>
                    <td>
                        <div class="mt-2">
                            @if (session.IsActive)
                            {
                                <button class="btn btn-dark btn-sm me-2"
                                        title="Copy Test Link"
                                        @onclick="() => CopyToClipboard(session)">
                                    <i class="bi bi-clipboard"></i> Copy Link
                                </button>
                            }
                            <button class="@(session.IsActive ? "btn btn-sm btn-danger me-2" : "btn btn-sm btn-dark me-2")"
                                    @onclick="() => DeactivateSession(session.Id)">
                                @(session.IsActive ? "Deactivate" : "Activate")
                            </button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(session.Id)">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Confirm Delete Modal -->
@if (deleteConfirmId != Guid.Empty)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this test session?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => deleteConfirmId = Guid.Empty">Cancel</button>
                    <button class="btn btn-danger" @onclick="DeleteConfirmed">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }
    private List<TestSession> testSessions = new();
    private Guid deleteConfirmId = Guid.Empty;
    private Guid creatorGuid;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is null) return;

        var authState = await AuthenticationState;
        string CreatorId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "Admin";

        creatorGuid = Guid.TryParse(CreatorId, out var parsed) ? parsed : Guid.Empty;

        await LoadTestSessionsAsync();
    }

    private async Task LoadTestSessionsAsync()
    {
        testSessions = await testSessionService.GetAllTestSessionAsync();
    }

    private async Task DeactivateSession(Guid id)
    {
        await testSessionService.ToggleActiveTestSessionAsync(id);
        await LoadTestSessionsAsync();
    }

    private void ConfirmDelete(Guid id)
    {
        deleteConfirmId = id;
    }

    private async Task DeleteConfirmed()
    {
        await testSessionService.DeleteTestSessionAsync(deleteConfirmId);
        deleteConfirmId = Guid.Empty;
        await LoadTestSessionsAsync();
    }

    private string GetTestLink(TestSession session)
    {
        string? baseUrl = Navigation.BaseUri.TrimEnd('/');
        
        if (string.IsNullOrWhiteSpace(baseUrl))
        {
            baseUrl = Navigation.Uri.TrimEnd('/');
        }
        
        return $"{baseUrl}/test/{session.UniversityId}/{session.Token}";
    }

    private async Task CopyToClipboard(TestSession session)
    {
        var link = GetTestLink(session);

        try
        {
            await JS.InvokeVoidAsync("copyText", link);
            ToastService.Success("Link Copied", $"Test link for '{session.University.Name}' copied to clipboard!", 5000);
        }
        catch (JSException ex)
        {
            ToastService.Error("Failed", "Failed to copy link.", 5000);
            Console.WriteLine("JS Error copying: " + ex.Message);
        }
    }
}
