@page "/"
@using AptitudeTestApp.Application.DTOs
@using AptitudeTestApp.Application.Interfaces
@using AptitudeTestApp.Application.Services
@using AptitudeTestApp.Data.Models
@using AptitudeTestApp.Shared.Components
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@attribute [Authorize]

@rendermode InteractiveServer

<PageTitle>Admin Dashboard</PageTitle>

<div class="container-fluid py-4 px-4 bg-white text-dark mt-2" style="min-height: 80vh;">
    <div class="mb-2">
        <h2 class="fw-semibold text-dark">Admin Dashboard</h2>
        <p class="text-muted">Welcome to the Talent Scope Administration Panel</p>
    </div>

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-4 g-4 mb-4">
        <div class="col">
            <DashboardCard title="Universities"
                           count="@totalUniversities"
                           icon="university"
                           link="/admin/universities" />
        </div>
        <div class="col">
            <DashboardCard title="Questions"
                           count="@totalQuestions"
                           icon="question-circle"
                           link="/admin/question-bank" />
        </div>  
        <div class="col">
            <DashboardCard title="Active Tests"
                           count="@activeTests"
                           icon="clipboard-list"
                           link="/admin/test-links" />
        </div>
        <div class="col">
            <DashboardCard title="Submissions"
                           count="@totalSubmissions"
                           icon="users"
                           link="/admin/student-results" />
        </div>
    </div>


    <!-- Quick Actions & Recent Sessions -->
    <div class="row g-4">
        <div class="col-md-6">
            <div class="card border-0 shadow-sm rounded-4 p-3 bg-white theme-box">
                <div class="card-header bg-transparent border-0 px-0">
                    <h5 class="fw-medium text-dark">Quick Actions</h5>
                </div>
                <div class="card-body d-grid gap-3 px-0">
                    @foreach (var action in QuickActions)
                    {
                        <a class="btn btn-light theme-box  d-flex align-items-center justify-content-between px-3 py-2 rounded-3 text-start" href="@action.Link">
                            <span><i class="fas fa-@action.Icon me-2"></i> @action.Label</span>
                            <i class="fas fa-chevron-right text-muted"></i>
                        </a>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card border-0 shadow-sm rounded-4 p-3 bg-white theme-box">
                <div class="card-header bg-transparent border-0 px-0">
                    <h5 class="fw-medium text-dark">Recent Test Sessions</h5>
                </div>
                <div class="card-body px-0">
                    @if (recentTestSessions?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover align-middle theme-box">
                                <thead class="table-light">
                                    <tr>
                                        <th>Test</th>
                                        <th>University</th>
                                        <th>Student</th>
                                        <th>Date</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var test in recentTestSessions.Take(5))
                                    {
                                        <tr>
                                            <td>@test.TestName</td>
                                            <td>@test.University?.Name</td>
                                            <td>@test.StudentSubmissions?.FirstOrDefault()?.StudentName</td>
                                            <td>@test.CreatedAt.ToString("MMM dd yyyy")</td>
                                            <td>
                                                <span class="badge rounded-pill bg-@(test.IsActive ? "dark" : "danger")">
                                                    @(test.IsActive ? "Active" : "Inactive")
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No recent sessions found.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }
    [Inject] private IUniversityService UniversityService { get; set; } = default!;
    [Inject] private IQuestionService QuestionService { get; set; } = default!;
    [Inject] private ITestSessionService TestSessionService { get; set; } = default!;
    [Inject] private IStudentSubmissionService StudentSubmissionService { get; set; } = default!;

    private int totalUniversities = 0;
    private int totalQuestions = 0;
    private int activeTests = 0;
    private int totalSubmissions = 0;
    private List<TestSession>? recentTestSessions;
    private Guid userId;

    private List<(string Label, string Icon, string Link)> QuickActions => new()
    {
        ("Create New Test", "plus", "/admin/create-test"),
        ("Add Question", "question", "/admin/add-question"),
        ("Add University", "university", "/admin/universities"),
        ("Export Results", "download", "/admin/results/export")
    };

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            string? userIdString = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            userId = Guid.TryParse(userIdString, out var parsedId) ? parsedId : Guid.Empty;
            await LoadDashboardData();
        }
    }

    private async Task LoadDashboardData()
    {
        totalUniversities = await UniversityService.GetTotalCountAsync(userId);
        totalQuestions = await QuestionService.GetTotalCountAsync(userId);
        activeTests = await TestSessionService.GetActiveTestCountAsync(userId);
        totalSubmissions = await StudentSubmissionService.GetTotalSubmissionCountAsync(userId);
        recentTestSessions = await TestSessionService.GetRecentTestSessionsAsync(1, userId);
    }
}
