@page "/admin/universities"
@using AptitudeTestApp.Application.DTOs
@using AptitudeTestApp.Application.Interfaces
@inject IUniversityService universityService
@using AptitudeTestApp.Data.Models
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@rendermode InteractiveServer
@attribute [Authorize]

<div class="container-fluid py-4 px-4 bg-white text-dark">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="text-dark mb-1">University Management</h2>
            <small class="text-muted">
                @if (totalCount > 0)
                {
                    <span>Showing @((currentPage - 1) * pageSize + 1) - @(Math.Min(currentPage * pageSize, totalCount)) of @totalCount universities</span>
                }
                else
                {
                    <span>No universities found</span>
                }
            </small>
        </div>
        <button class="btn btn-dark rounded-pill px-4 shadow-sm" @onclick="ShowAddModal">
            <i class="bi bi-plus-circle me-2"></i>Add University
        </button>
    </div>

    <!-- Search and Filters -->
    <div class="card border-dark mb-4">
        <div class="card-body bg-light">
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <label class="form-label fw-bold text-dark mb-0">Search Universities</label>
                        @* <span class="badge bg-dark text-white">
                            @totalCount found
                        </span> *@
                    </div>
                    <div class="input-group">
                        <span class="input-group-text bg-white border-dark">
                            <i class="bi bi-search text-dark"></i>
                        </span>
                        <input type="text" 
                               class="form-control border-dark" 
                               placeholder="Search by name or code..." 
                               @bind="searchTerm" 
                               @bind:event="oninput" />
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <button class="btn btn-outline-dark" type="button" @onclick="ClearSearch">
                                <i class="bi bi-x"></i>
                            </button>
                        }
                    </div>
                </div>

                <div class="col-md-3">
                    <label class="form-label fw-bold text-dark">Status Filter</label>
                    <select class="form-select border-dark" @bind="selectedStatus">
                        <option value="">All Status</option>
                        <option value="true">Active</option>
                        <option value="false">Inactive</option>
                    </select>
                </div>

                <div class="col-md-5 d-flex align-items-end gap-2">
                    <button class="btn btn-dark" @onclick="ApplyFilters">
                        <i class="bi bi-search me-1"></i>Search
                    </button>
                    <button class="btn btn-outline-dark" @onclick="ResetFilters">
                        <i class="bi bi-arrow-clockwise me-1"></i>Reset
                    </button>
                    <div class="dropdown">
                        <button class="btn btn-outline-dark dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            Show @pageSize
                        </button>
                        <ul class="dropdown-menu">
                            <li><button class="dropdown-item" @onclick="() => ChangePageSize(5)">5 per page</button></li>
                            <li><button class="dropdown-item" @onclick="() => ChangePageSize(10)">10 per page</button></li>
                            <li><button class="dropdown-item" @onclick="() => ChangePageSize(25)">25 per page</button></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-dark" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading universities...</p>
        </div>
    }
    else if (universities?.Any() == true)
    {
        <!-- Universities Grid -->
        <div class="row">
            @foreach (var uni in universities)
            {
                <div class="col-12 mb-3">
                    <div class="card border-dark shadow-sm">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <!-- University Info -->
                                <div class="col-md-6">
                                    <h5 class="card-title mb-2 text-dark">
                                        @HighlightSearchTerm(uni.Name, searchTerm)
                                    </h5>
                                    <div class="d-flex gap-2 mb-2">
                                        <span class="badge bg-dark text-white">@uni.Code</span>
                                        <span class="badge @(uni.IsActive ? "bg-white text-dark border border-dark" : "bg-danger text-white")">
                                            @(uni.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </div>
                                    <div class="text-muted">
                                        <i class="bi bi-envelope me-1"></i>@uni.ContactEmail
                                    </div>
                                    <small class="text-muted">
                                        <i class="bi bi-calendar me-1"></i>Created: @uni.CreatedAt.ToShortDateString()
                                    </small>
                                </div>

                                <!-- Action Buttons -->
                                <div class="col-md-6">
                                    <div class="d-flex justify-content-end gap-2">
                                        <button class="btn btn-sm btn-outline-dark" 
                                                @onclick="() => ShowEditModal(uni)">
                                            <i class="bi bi-pencil me-1"></i>Edit
                                        </button>
                                        <button class="btn btn-sm @(uni.IsActive ? "btn-outline-secondary" : "btn-dark")" 
                                                @onclick="() => ToggleActivateUniversity(uni.Id)">
                                            <i class="bi bi-@(uni.IsActive ? "eye-slash" : "eye") me-1"></i>
                                            @(uni.IsActive ? "Deactivate" : "Activate")
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" 
                                                @onclick="() => ShowDeleteConfirmation(uni)">
                                            <i class="bi bi-trash me-1"></i>Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="text-muted">
                Page @currentPage of @TotalPages (@totalCount total universities)
            </div>
            <nav>
                <ul class="pagination pagination-sm mb-0">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link border-dark text-dark bg-white" @onclick="() => GoToPage(1)" disabled="@(currentPage == 1)">
                            <i class="bi bi-chevron-double-left"></i>
                        </button>
                    </li>
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link border-dark text-dark bg-white" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                    </li>

                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(TotalPages, currentPage + 2); i++)
                    {
                        int pageNumber = i;
                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                            <button class="page-link @(pageNumber == currentPage ? "bg-dark border-dark text-white" : "border-dark text-dark bg-white")" 
                                    @onclick="() => GoToPage(pageNumber)">
                                @pageNumber
                            </button>
                        </li>
                    }

                    <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                        <button class="page-link border-dark text-dark bg-white" @onclick="NextPage" disabled="@(!CanGoNext)">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </li>
                    <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                        <button class="page-link border-dark text-dark bg-white" @onclick="() => GoToPage(TotalPages)" disabled="@(currentPage == TotalPages)">
                            <i class="bi bi-chevron-double-right"></i>
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <!-- Empty State -->
        <div class="text-center py-5">
            <i class="bi bi-building fs-1 text-muted mb-3"></i>
            <h4 class="text-muted">No Universities Found</h4>
            <p class="text-muted mb-4">
                @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedStatus))
                {
                    <span>No universities match your current filters.</span>
                }
                else
                {
                    <span>Get started by adding your first university.</span>
                }
            </p>
            @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedStatus))
            {
                <button class="btn btn-outline-dark me-2" @onclick="ResetFilters">
                    <i class="bi bi-arrow-clockwise me-1"></i>Clear Filters
                </button>
            }
            <button class="btn btn-dark" @onclick="ShowAddModal">
                <i class="bi bi-plus-circle me-1"></i>Add First University
            </button>
        </div>
    }
</div>

<!-- Add/Edit Modal -->
@if (showModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content border-dark">
                <div class="modal-header bg-light border-dark">
                    <h5 class="modal-title text-dark">
                        <i class="bi bi-@(selectedUniversity.Id == Guid.Empty ? "plus-circle" : "pencil") me-2"></i>
                        @((selectedUniversity.Id == Guid.Empty) ? "Add University" : "Edit University")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold text-dark">
                            University Name <span class="text-danger">*</span>
                        </label>
                        <input class="form-control border-dark @(ShowValidation && string.IsNullOrWhiteSpace(selectedUniversity.Name) ? "is-invalid" : "")" 
                               @bind="selectedUniversity.Name" 
                               placeholder="Enter university name..." />
                        @if (ShowValidation && string.IsNullOrWhiteSpace(selectedUniversity.Name))
                        {
                            <div class="invalid-feedback">University name is required</div>
                        }
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold text-dark">
                            University Code <span class="text-danger">*</span>
                        </label>
                        <input class="form-control border-dark @(ShowValidation && string.IsNullOrWhiteSpace(selectedUniversity.Code) ? "is-invalid" : "")" 
                               @bind="selectedUniversity.Code" 
                               placeholder="Enter university code (e.g., MIT, UCLA)..." />
                        @if (ShowValidation && string.IsNullOrWhiteSpace(selectedUniversity.Code))
                        {
                            <div class="invalid-feedback">University code is required</div>
                        }
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold text-dark">
                            Contact Email <span class="text-danger">*</span>
                        </label>
                        <input type="email" 
                               class="form-control border-dark @(ShowValidation && !IsValidEmail(selectedUniversity.ContactEmail ?? string.Empty) ? "is-invalid" : "")" 
                               @bind="selectedUniversity.ContactEmail" 
                               placeholder="Enter contact email..." />
                        @if (ShowValidation && !IsValidEmail(selectedUniversity.ContactEmail))
                        {
                            <div class="invalid-feedback">Valid email address is required</div>
                        }
                    </div>

                    @if (ShowValidation && !IsFormValid())
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            Please fill in all required fields correctly.
                        </div>
                    }
                </div>
                <div class="modal-footer bg-light border-dark">
                    <button class="btn btn-outline-dark" @onclick="CloseModal">
                        <i class="bi bi-x-circle me-1"></i>Cancel
                    </button>
                    <button class="btn btn-dark" @onclick="SaveUniversity" disabled="@isSaving">
                        <i class="bi bi-@(isSaving ? "hourglass-split" : "check-circle") me-1"></i>
                        @(isSaving ? "Saving..." : "Save University")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6); backdrop-filter: blur(2px);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content border-0 shadow-lg rounded-4">
                <div class="modal-header bg-danger text-white rounded-top-4">
                    <h5 class="modal-title d-flex align-items-center">
                        <i class="bi bi-exclamation-triangle-fill me-2 fs-4"></i>
                        Confirm Deletion
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p class="mb-3">Are you sure you want to delete this university?</p>
                    <div class="alert alert-light border">
                        <strong>@universityToDelete?.Name</strong><br>
                        <small class="text-muted">Code: @universityToDelete?.Code</small>
                    </div>
                    <p class="text-danger mb-0">
                        <i class="bi bi-exclamation-triangle me-1"></i>
                        <strong>This action cannot be undone.</strong>
                    </p>
                </div>
                <div class="modal-footer justify-content-between">
                    <button class="btn btn-outline-secondary" @onclick="CloseDeleteModal">
                    <i class="bi bi-x-circle me-1"></i> Cancel
                    </button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">
                        <i class="bi bi-@(isDeleting ? "hourglass-split" : "trash") me-1"></i>
                        @(isDeleting ? "Deleting..." : "Delete University")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    
    private List<UniversityDto> universities = new();
    private UniversityDto selectedUniversity = new();
    private UniversityDto? universityToDelete;
    private bool showModal = false;
    private bool showDeleteModal = false;
    private bool ShowValidation = false;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isDeleting = false;
    
    Guid userId;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount = 0;
    private int TotalPages => (int)Math.Ceiling((double)totalCount / pageSize);
    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage < TotalPages;

    // Filtering
    private string searchTerm = string.Empty;
    private string selectedStatus = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            string? userIdString = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (Guid.TryParse(userIdString, out var parsedUserId))
                userId = parsedUserId;
            else
                userId = Guid.Empty;

            await LoadUniversities();
        }
    }

    private async Task LoadUniversities()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
             bool? isActive = null;

            if (!string.IsNullOrWhiteSpace(selectedStatus) && 
                bool.TryParse(selectedStatus, out var parsedStatus))
            {
                isActive = parsedStatus;
            }

            (universities, totalCount) = await universityService.GetUniversitiesByFiltersAsync(userId, (currentPage - 1) * pageSize, pageSize, isActive);
        }
        catch (Exception)
        {
            universities = new List<UniversityDto>();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadUniversities();
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        await ApplyFilters();
    }

    private async Task ResetFilters()
    {
        searchTerm = string.Empty;
        selectedStatus = string.Empty;
        currentPage = 1;
        await LoadUniversities();
    }

    private async Task ChangePageSize(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1;
        await LoadUniversities();
    }

    private async Task GoToPage(int page)
    {
        if (page < 1 || page > TotalPages || page == currentPage) return;
        
        currentPage = page;
        await LoadUniversities();
    }

    private async Task NextPage()
    {
        if (CanGoNext)
        {
            currentPage++;
            await LoadUniversities();
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoPrevious)
        {
            currentPage--;
            await LoadUniversities();
        }
    }

    private void ShowAddModal()
    {
        selectedUniversity = new UniversityDto();
        ShowValidation = false;
        showModal = true;
    }

    private void ShowEditModal(UniversityDto uni)
    {
        selectedUniversity = new UniversityDto
        {
            Id = uni.Id,
            Name = uni.Name,
            Code = uni.Code,
            ContactEmail = uni.ContactEmail
        };
        ShowValidation = false;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        selectedUniversity = new UniversityDto();
        ShowValidation = false;
    }

    private void ShowDeleteConfirmation(UniversityDto uni)
    {
        universityToDelete = uni;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        universityToDelete = null;
    }

    private async Task SaveUniversity()
    {
        ShowValidation = true;
        
        if (!IsFormValid())
        {
            StateHasChanged();
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            if (selectedUniversity.Id == Guid.Empty)
                await CreateNewUniversity(selectedUniversity, userId);
            else
                await UpdateExistingUniversity(selectedUniversity, userId);

            showModal = false;
            await LoadUniversities();
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a toast here
            Console.WriteLine($"Error processing university: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmDelete()
    {
        if (universityToDelete == null) return;

        isDeleting = true;
        StateHasChanged();

        try
        {
            await universityService.DeleteAsync(universityToDelete.Id, userId);
            showDeleteModal = false;
            await LoadUniversities();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error deleting university: {ex.Message}");
        }
        finally
        {
            isDeleting = false;
            universityToDelete = null;
            StateHasChanged();
        }
    }

    private async Task ToggleActivateUniversity(Guid id)
    {
        try
        {
            await universityService.ToggleActivateUniversityAsync(id);
            await LoadUniversities();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error toggling university status: {ex.Message}");
        }
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(selectedUniversity.Name) &&
               !string.IsNullOrWhiteSpace(selectedUniversity.Code) &&
               IsValidEmail(selectedUniversity.ContactEmail ?? string.Empty);
    }

    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email)) return false;
        
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private MarkupString HighlightSearchTerm(string text, string searchTerm)
    {
        if (string.IsNullOrEmpty(searchTerm) || string.IsNullOrEmpty(text))
            return new MarkupString(text);

        var highlightedText = text.Replace(
            searchTerm,
            $"<mark class='bg-secondary text-white px-1 rounded'>{searchTerm}</mark>",
            StringComparison.OrdinalIgnoreCase);

        return new MarkupString(highlightedText);
    }

    private Guid GetUserIdFromAuthState(AuthenticationState authState)
    {
        string? userIdString = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return Guid.TryParse(userIdString, out var parsedUserId) ? parsedUserId : Guid.Empty;
    }

    private async Task CreateNewUniversity(UniversityDto university, Guid userId)
    {
        university.IsActive = true;
        await universityService.CreateAsync(university, userId);
    }

    private async Task UpdateExistingUniversity(UniversityDto university, Guid userId)
    {
        await universityService.UpdateAsync(university, userId);
    }
}