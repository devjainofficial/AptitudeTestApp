@page "/test/{StudentSubmissionId:guid}/questions"
@inject ITestSessionService TestSessionService
@inject JavaScriptService JSService
@inject NavigationManager Navigation
@inject IStudentSubmissionService StudentSubmissionService

@using AptitudeTestApp.Application.DTOs
@using AptitudeTestApp.Application.Interfaces
@using AptitudeTestApp.Application.Services
@using AptitudeTestApp.Data.Models
@using AptitudeTestApp.Shared.Enums

@rendermode InteractiveServer

<PageTitle>Take Test</PageTitle>

<style>
    .test-container {
        max-width: 1000px;
        margin: auto;
        background-color: white;
        border: 2px solid black;
        border-radius: 10px;
        padding: 2rem;
        box-shadow: 4px 4px 0 black;
        margin-top: 7rem;
    }

    .question-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .option-card {
        display: block;
        padding: 1rem;
        border: 1px solid black;
        border-radius: 8px;
        margin-bottom: 0.75rem;
        background-color: #f9f9f9;
        transition: all 0.3s ease-in-out;
        cursor: pointer;
    }

        .option-card:hover {
            background-color: #e6e6e6;
        }

        .option-card input[type="radio"] {
            margin-right: 0.5rem;
        }

    .nav-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 2rem;
    }

    .btn-custom {
        border: 2px solid black;
        background-color: white;
        color: black;
        padding: 0.5rem 1.25rem;
        border-radius: 5px;
        font-weight: 500;
        transition: background-color 0.2s ease-in-out;
    }

        .btn-custom:hover {
            background-color: black;
            color: white;
        }

    .info-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        font-weight: 600;
    }

    .badge {
        border: 1px solid black;
        border-radius: 4px;
        padding: 0.25rem 0.75rem;
        background-color: white;
        font-size: 0.875rem;
    }
</style>

@if (submission is not null)
{
    <div class="test-container">
        <div class="info-bar">
            <div>@submission.TestSession.TestName</div>
            <div>
                <span class="badge text-dark">Time Left: @timeRemaining</span>
                <span class="badge text-dark" style="margin-left: 1rem;">Question @(currentQuestionIndex + 1) / @questions.Count</span>
            </div>
        </div>

        @if (questions.Any())
        {
            var currentQuestion = questions[currentQuestionIndex];
            <div class="question-title">@currentQuestion.QuestionText</div>

            @foreach (var option in currentQuestion.Options)
            {
                <label class="option-card">
                    <input type="radio" name="questionOptions"
                           value="@option.Id"
                           checked="@(selectedOptionId == option.Id)"
                           @onchange="() => SelectAnswer(currentQuestion.Id, option.Id)" />
                    @option.OptionText
                </label>
            }

            <div class="nav-buttons">
                <button class="btn-custom" @onclick="PreviousQuestion" disabled="@(currentQuestionIndex == 0)">Previous</button>

                @if (currentQuestionIndex < questions.Count - 1)
                {
                    <button class="btn-custom" @onclick="NextQuestion">Next</button>
                }
                else
                {
                    <button class="btn-custom" @onclick="ConfirmSubmission" disabled="@isSubmitting">Submit Test</button>
                }
            </div>
        }
    </div>
}
else
{
    <div class="test-container text-center">
        <p>Loading...</p>
    </div>
}

@code {
    [Parameter] public required Guid StudentSubmissionId { get; set; }

    private StudentSubmissionDto? submission;
    private List<QuestionDto> questions = new();
    private Dictionary<Guid, Guid> selectedAnswers = new();
    private int currentQuestionIndex = 0;
    private string timeRemaining = "";
    private DateTime testEndTime;
    private Timer? timer;
    private bool isSubmitting = false;
    private Guid? selectedOptionId;

    protected override async Task OnInitializedAsync()
    {

        submission = await StudentSubmissionService.GetSubmissionDetailsByIdAsync(StudentSubmissionId);

        if (submission is null ||
            submission.Status == TestStatus.Completed ||
            submission.Status == TestStatus.Disqualified ||
            DateTime.Now > submission.StartTime.AddMinutes(submission.TestSession.TimeLimit))
        {
            Navigation.NavigateTo("/test/unavailable", forceLoad: true);
            return;
        }

        questions = await TestSessionService.GetRandomizedQuestionsAsync(StudentSubmissionId);

        testEndTime = submission.StartTime.AddMinutes(submission.TestSession.TimeLimit);
        StartTimer();
        LoadSavedAnswers();
    }

    private void StartTimer()
    {
        timer = new Timer(UpdateTimer, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async void UpdateTimer(object? state)
    {
        var remaining = testEndTime - DateTime.Now;
        if (remaining <= TimeSpan.Zero)
        {
            await InvokeAsync(() => AutoSubmitTest("TimedOut"));
        }
        else
        {
            await InvokeAsync(() =>
            {
                timeRemaining = $"{remaining.Hours:D2}:{remaining.Minutes:D2}:{remaining.Seconds:D2}";
                StateHasChanged();
            });
        }
    }

    private void LoadSavedAnswers()
    {
        var questionId = questions[currentQuestionIndex].Id;
        selectedOptionId = selectedAnswers.ContainsKey(questionId) ? selectedAnswers[questionId] : null;
    }

    private async Task SelectAnswer(Guid questionId, Guid optionId)
    {
        if (selectedAnswers.TryGetValue(questionId, out var existingOptionId) && existingOptionId == optionId)
        {
            return;
        }

        selectedAnswers[questionId] = optionId;
        selectedOptionId = optionId;
        await TestSessionService.SaveAnswerAsync(StudentSubmissionId, questionId, optionId);
    }

    private void NextQuestion()
    {
        if (currentQuestionIndex < questions.Count - 1)
        {
            currentQuestionIndex++;
            LoadSavedAnswers();
        }
    }

    private void PreviousQuestion()
    {
        if (currentQuestionIndex > 0)
        {
            currentQuestionIndex--;
            LoadSavedAnswers();
        }
    }

    private async Task ConfirmSubmission()
    {
        var unanswered = questions.Count - selectedAnswers.Count;
        await SubmitTest();
    }

    private async Task SubmitTest()
    {
        isSubmitting = true;
        await StudentSubmissionService.SubmitTestAsync(StudentSubmissionId, "Completed");
        await JSService.CleanupAntiCheat();
        Navigation.NavigateTo($"/test/completed/{StudentSubmissionId}");
    }

    private async Task AutoSubmitTest(string reason)
    {
        await StudentSubmissionService.SubmitTestAsync(StudentSubmissionId, reason);
        await JSService.CleanupAntiCheat();
        Navigation.NavigateTo($"/test/completed/{StudentSubmissionId}?reason={Uri.EscapeDataString(reason)}");
    }

    public async ValueTask DisposeAsync()
    {
        timer?.Dispose();
        await JSService.CleanupAntiCheat();
    }
}