@page "/test/{StudentSubmissionId:guid}/start"
@using AptitudeTestApp.Application.DTOs
@using AptitudeTestApp.Application.Interfaces
@using AptitudeTestApp.Application.Services
@using AptitudeTestApp.Data.Models
@using AptitudeTestApp.Shared.Enums
@inject ITestSessionService TestSessionService
@inject IStudentSubmissionService StudentSubmissionService
@inject NavigationManager Navigation
@inject JavaScriptService JSService
@inject IToastService ToastService

@rendermode InteractiveServer

<PageTitle>Test Instructions</PageTitle>

@if (submission is null)
{
    <div class="vh-90 d-flex align-items-center justify-content-center bg-white text-dark">
        <div class="text-center">
            <div class="spinner-border text-black" role="status"></div>
            <p class="mt-3">Loading test details...</p>
        </div>
    </div>
}
else
{
    <div class="bg-white text-dark d-flex justify-content-center align-items-center px-3" style="min-height: 88vh;">
        <div class="container" style="max-width: 680px;">
            <div class="border border-dark p-5 rounded">
                <h1 class="display-5 fw-bold text-center mb-4 border-bottom pb-2">@submission.TestSession.TestName</h1>

                <div class="mb-4">
                    <h5 class="text-uppercase fw-semibold mb-3">
                        <i class="bi bi-info-circle me-2"></i>Test Summary
                    </h5>
                    <div class="row small">
                        <div class="col-6"><i class="bi bi-clock me-2"></i>Duration: <strong>@submission.TestSession.TimeLimit min</strong></div>
                        <div class="col-6"><i class="bi bi-shuffle me-2"></i>Randomized: <strong>Yes</strong></div>
                    </div>
                </div>

                <div class="mb-4">
                    <h5 class="text-uppercase fw-semibold mb-3">
                        <i class="bi bi-exclamation-triangle me-2"></i>Instructions
                    </h5>
                    <ul class="small ps-3">
                        <li>Read each question carefully.</li>
                        <li>Do not refresh or navigate away.</li>
                        <li>Tab switches are tracked.</li>
                        <li>Auto submit on time expiry.</li>
                        <li>You can submit only once.</li>
                    </ul>
                </div>

                <div class="form-check mb-4">
                    <input type="checkbox" class="form-check-input bg-white border-dark" id="agree" @bind="agreedToTerms" />
                    <label class="form-check-label" for="agree">I have read and understood the above instructions.</label>
                </div>

                <div class="text-center">
                    <button class="btn btn-outline-dark btn-lg px-4 fw-bold w-100"
                            disabled="@(!agreedToTerms)"
                            @onclick="StartTest">
                        <i class="bi bi-play-fill me-2"></i> Start the Test
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public required Guid StudentSubmissionId { get; set; }
    private StudentSubmissionDto? submission;
    private bool agreedToTerms = false;

    protected override async Task OnInitializedAsync()
    {
        submission = await StudentSubmissionService.GetSubmissionDetailsByIdAsync(StudentSubmissionId);
    }

    private async Task StartTest()
    {
        if (submission?.TestSession != null)
        {
            if (submission is null ||
                submission.Status == TestStatus.Completed ||
                submission.Status == TestStatus.Disqualified ||
                DateTime.Now > submission.StartTime.AddMinutes(submission.TestSession.TimeLimit))
            {
                Navigation.NavigateTo("/test/unavailable", forceLoad: true);
                return;
            }

            await JSService.InitializeAntiCheat(StudentSubmissionId, submission.TestSession.MaxTabSwitches);
            Navigation.NavigateTo($"/test/{StudentSubmissionId}/questions");
        }
        else
        {
            ToastService.Error("Unable to start test", "Test session not found", 5000);
        }
    }
}
